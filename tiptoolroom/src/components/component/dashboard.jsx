  /**
   * This code was generated by v0 by Vercel.
   * @see https://v0.dev/t/dVOy2ZWxsTO
   */

  'use client'

  import axios from 'axios';
  import Link from "next/link"
  import { Button } from "@/components/ui/button"
  import { Badge } from "@/components/ui/badge"
  import { Input } from "@/components/ui/input"
  import { DropdownMenuTrigger, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem, DropdownMenuContent, DropdownMenu } from "@/components/ui/dropdown-menu"
  import { CardTitle, CardHeader, CardContent, Card, CardFooter } from "@/components/ui/card"
  import { TableHead, TableRow, TableHeader, TableCell, TableBody, Table } from "@/components/ui/table"
  import { Separator } from "@/components/ui/separator"
  import BorrowButton from "@/app/profile/borrowbutton"
  import { Toolboxicon } from "./toolboxicon"
  import { useRouter } from "next/navigation";
  import { useEffect,useState } from "react"
  import React from 'react';
  import Image from 'next/image';
  import logo from '../../../public/logo.png';
  import profile from '../../../public/profile.png';

  export function Dashboard() {
  const [accountData, setAccountData] = useState(null);
  const [accountDetails, setAccountDetails] = useState(null);
  const [accountID, setaccountID] = useState(null);
  const [jwt, setJwt] = useState('');
  const router = useRouter()
  useEffect(() => {
    fetch(`http://localhost:6969/accounts/${localStorage.getItem('ID')}`)
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
            setAccountData(data);
            console.log(data);
        })
        .catch(error => {
            console.error("Error fetching account data: ", error);
        });
  }, []);
  const getJwtFromSession = () => {
    const token = sessionStorage.getItem('jwt');
    if (token) {
      setJwt(token);
    }
  };
  const [errorMessage, setErrorMessage] = useState(null);


  useEffect(() => {
    const verifyRole = async () => {
      try {
        const response = await fetch('http://localhost:6969/student/verify', {
          method: 'POST',
          headers: {
            'Authorization': `bearer ${sessionStorage.getItem('jwt')}`,
          },
        });
  
        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.message || 'An error occurred');
        }
  
        console.log('Success: Role is  1');
      } catch (error) {
        setErrorMessage(error.message);
        if (error.message.includes('Role is not  1')) {
          router.push('/professor/Login');
        } else {
          router.push('/');
        }
      }
    };
  
    verifyRole();
  }, []);
  

  useEffect(() => {
    if (errorMessage) {
      alert(`unauthorized user ./.`);
    }
  }, [errorMessage]);
  useEffect(() => {
    getJwtFromSession();
  }, []); 
  useEffect(() => {
    fetch(`http://localhost:6969/student/${localStorage.getItem('ID')}`)
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
            setAccountDetails(data);
            console.log(data);
        })
        .catch(error => {
            console.error("Error fetching account data: ", error);
        });
  }, []);
  useEffect(() => {
    fetch(`http://localhost:6969/student/${localStorage.getItem('ID')}`)
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
          setaccountID(data);
            console.log(data);
        })
        .catch(error => {
            console.error("Error fetching account data: ", error);
        });
  }, []);
  const [itemData, setItemData] = useState([]); // Initialize with an empty array
  useEffect(() => {
    const userId = localStorage.getItem('S_ID');
    if (userId) {
      fetch(`http://localhost:6969/req/transact/${userId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          // Assuming data is an array of objects, and we want to log the s_id of the first object
          if (data && data.length > 0) {
            console.log('s_id from local storage:', userId); // Use userId here
            console.log('s_id from database:', data[0].s_id);
            setItemData(data);
          } else {
            console.warn('No data found for the given s_id');
          }
        })
        .catch(error => {
          console.error('Error fetching items data: ', error);
        });
    }
  }, []);
  
  

  const renderRows = () => {
    const statusMessages = {
      1: 'added to Toolbox',
      2: 'Approved by your instructor',
      3: 'approved by Admin ',
      4: 'Preparing',
      5: 'reject',
      6: 'Ready to Pick up',
      7: 'Returned', 
    };
  
    const groupedTransactions = itemData
    .filter(transaction => transaction.st_id !==  7)
    .reduce((groups, transaction) => {
      const key = `${transaction.sdate}-${transaction.stime}`;
      if (!groups[key]) {
        groups[key] = [];
      }
      const existingTransaction = groups[key].find(
        t => t.sdate === transaction.sdate && t.stime === transaction.stime
      );
      if (existingTransaction) {
        existingTransaction.total += transaction.total;
      } else {
        groups[key].push(transaction);
      }
      return groups;
    }, {});
  
  
    return Object.entries(groupedTransactions).map(([key, transactions]) => (
      <React.Fragment key={key}>
        {transactions.map((transaction, index) => (
          <TableRow key={index}>
            <TableCell className="font-medium">{transaction.sdate}</TableCell>
            <TableCell>{statusMessages[transaction.st_id]}</TableCell>
          </TableRow>
        ))}
      </React.Fragment>
    ));
  };
  
  
  
      const handleLogout = () => {
        sessionStorage.removeItem('jwt');
        localStorage.removeItem('S_ID');
        localStorage.removeItem('ID');
    
        router.push('/');
      };

  
  
  
    return (
      
      (<div
      
        className="grid min-h-screen w-full overflow-hidden lg:grid-cols-[280px_1fr]">
          <Image src={logo} alt="Logo" className="logo" width={45} height={20} />
        <div className="hidden border-r bg-gray-100/40 lg:block dark:bg-gray-800/40">
          <div className="flex h-full max-h-screen flex-col gap-2">
            <div className="flex h-[60px] items-center border-b px-6">
              <Link className="flex items-center gap-2 font-semibold" href="#">
                <Package2Icon className="h-6 w-6" />
                <span className="">Toolroom Inc</span>
              </Link>
              <Button className="ml-auto h-8 w-8" size="icon" variant="outline">
                <BellIcon className="h-4 w-4" />
                <span className="sr-only">Toggle notifications</span>
              </Button>
            </div>
            <div className="flex-1 overflow-auto py-2">
              <nav className="grid items-start px-4 text-sm font-medium">
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/profile">
                <HomeIcon className="h-4 w-4" />
                Home
              </Link>

              </nav>
            </div>
          </div>
        </div>
        
        <div className="flex flex-col">
          <header
            className="flex h-14 lg:h-[60px] items-center gap-4 border-b bg-gray-100/40 px-6 dark:bg-gray-800/40">
            <Link className="lg:hidden" href="#">
              <Package2Icon className="h-6 w-6" />
              <span className="sr-only">Home</span>
            </Link>
            
            <div className="w-full flex-1">
              
              <form>
                <div className="relative">
                  <SearchIcon
                    className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
                  <Input
                    className="w-full bg-white shadow-none appearance-none pl-8 md:w-2/3 lg:w-1/3 dark:bg-gray-950"
                    placeholder="Search"
                    type="search" />
                    
                </div>
              </form>
              
              
            </div>
            <Toolboxicon/>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
              <Button
                className="rounded-full border border-gray-200 w-8 h-8 dark:border-gray-800"
                size="icon"
                variant="ghost">
                  <img
                    alt="profile"
                    className="profile "
                    src="/profile.png"
                    onError={(e) => {
                      e.target.onerror = null; // Prevent infinite loop
                      e.target.src = 'fallback-image-url'; // Set fallback image URL
                    }}
                    style={{
                      width: '32px',
                      height: '32px',
                      objectFit: 'cover',
                    }}
                  />
                <span className="sr-only">Toggle user menu</span>
              </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>My Account</DropdownMenuLabel>
            
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleLogout} >Logout</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </header>
          <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
            <div className="flex items-center gap-4">
            <h1 className="font-semibold text-lg md:text-xl">Dashboard</h1>
        </div>
        <div className="flex flex-col md:grid md:grid-cols-6 gap-6">
          <div className="md:col-span-4 lg:col-span-3 xl:col-span-4 flex flex-col gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Order History</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                  <TableRow>
                      <TableHead className="max-w-[150px]">Date</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead />
                  </TableRow>
                  </TableHeader>
                  <TableBody>
                  {renderRows()}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
                <Card>
                  <CardHeader>
                    <CardTitle>Account Settings</CardTitle>
                  </CardHeader>
                  <CardContent className="grid gap-4">
                    <div className="flex items-center">
                      <div>Name</div>
                      <div className="ml-auto">{accountDetails?.first_name} {accountDetails?.last_name}</div>
                    </div>
                    <div className="flex items-center">
                      <div>Email</div>
                      <div className="ml-auto">{accountData?.email}</div>
                    </div>
                    <div className="flex items-center">
                      <div>Student ID</div>
                      <div className="ml-auto">{accountID?.s_id}</div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex items-center gap-2">
                    <Button size="sm">Edit Account</Button>
                  </CardFooter>
                </Card>
              </div>
              <div className="md:col-span-2 lg:col-span-3 xl:col-span-2 flex flex-col gap-6">
                  <Card>
                  <CardHeader className="relative flex flex-row items-center">
                    <CardTitle>Tool Management</CardTitle>
                    <Link href="/profile/borrowed" className="absolute bottom-3 right-3">
                      <BorrowButton />
                    </Link>
                  </CardHeader>

                  </Card>
                </div>
            </div>
          </main>
        </div>
      </div>)
    );
  }


  function Package2Icon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <path d="M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z" />
        <path d="m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9" />
        <path d="M12 3v6" />
      </svg>)
    );
  }


  function BellIcon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
        <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
      </svg>)
    );
  }


  function HomeIcon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
        <polyline points="9 22 9 12 15 12 15 22" />
      </svg>)
    );
  }


  function ShoppingCartIcon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <circle cx="8" cy="21" r="1" />
        <circle cx="19" cy="21" r="1" />
        <path
          d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
      </svg>)
    );
  }


  function PackageIcon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <path d="m7.5 4.27 9 5.15" />
        <path
          d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z" />
        <path d="m3.3 7 8.7 5 8.7-5" />
        <path d="M12 22V12" />
      </svg>)
    );
  }


  function UsersIcon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
        <circle cx="9" cy="7" r="4" />
        <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
        <path d="M16 3.13a4 4 0 0 1 0 7.75" />
      </svg>)
    );
  }


  function SearchIcon(props) {
    return (
      (<svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round">
        <circle cx="11" cy="11" r="8" />
        <path d="m21 21-4.3-4.3" />
      </svg>)
    );
  }
